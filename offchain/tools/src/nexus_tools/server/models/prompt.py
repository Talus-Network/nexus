# coding: utf-8

from __future__ import annotations

from pydantic import BaseModel, Field, validator
from typing import List, Optional


class Prompt(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    Prompt - a model defined in OpenAPI

        prompt: The text of this Prompt.
        model: The model of this Prompt.
        max_tokens: The max_tokens of this Prompt.
        temperature: The temperature of this Prompt.
    """

    prompt: str = Field(alias="prompt")
    model: str = Field(alias="model", default="llama3.2:1b")
    max_tokens: int = Field(alias="max_tokens", default=1000)
    temperature: float = Field(alias="temperature", default=1.0)
    tools: Optional[List[str]] = Field(
        default=None, description="List of tool names to be used"
    )

    @validator("temperature")
    def temperature_max(cls, value):
        assert value <= 1
        assert value >= 0
        return value

    @validator("temperature")
    def temperature_min(cls, value):
        assert value >= 0
        return value


Prompt.update_forward_refs()
